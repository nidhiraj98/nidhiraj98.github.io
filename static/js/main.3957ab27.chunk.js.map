{"version":3,"sources":["typing.js","exchange.js","App.js","serviceWorker.js","index.js"],"names":["textArr","quote","Math","floor","random","length","Quote","props","state","pos","min","sec","milisec","speed","this","typingFunction","typing","bind","window","addEventListener","document","getElementsByClassName","removeEventListener","event","preventDefault","key","currentCode","which","code","currentKey","data","String","fromCharCode","getCharFromEvent","setState","startTime","Date","timerID","setInterval","tick","clearInterval","toFixed","getElementById","style","display","diffInMilisec","className","substring","slice","id","React","Component","Button","type","App","fromInEUR","toInEUR","rates","currencies","fetch","then","r","ok","json","Error","statusText","Object","assign","catch","e","console","error","fetchCurrencies","Currency","converted","amount","parseInt","value","isNaN","curr","placeholder","onChange","handleChange","onClick","handleClick","to","path","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.3957ab27.chunk.js","sourcesContent":["import React from 'react';\nimport './typing.css';\n\nconst textArr = [\n  \"The purpose of our lives is to be happy.\",\n  \"Life is what happens when you're busy making other plans.\",\n  \"Money and success don't change people; they merely amplify what is already there.\",\n  \"If life were predictable it would cease to be life and be without flavor.\",\n  \"The big lesson in life is to never be scared of anyone or anything.\",\n  \"The way I see it, if you want the rainbow, you gotta put up with the rain.\",\n  \"Don't settle for what life gives you; make life better and build something.\",\n  \"You never really learn much from hearing yourself speak.\"\n]\nconst index = Math.floor(Math.random() * textArr.length)\nlet quote = textArr[index]\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className = \"body\">\n        <h1>Check how fast you can type NOW!!</h1>\n        <Quote />\n        <Button />\n      </div>\n    </div>\n  );\n}\n\nfunction getCharFromEvent(event){\n  const currentCode = event.which || event.code;\n  let currentKey = event.data || event.key;\n  if(!currentKey){\n    currentKey = String.fromCharCode(currentCode);\n  }\n  return currentKey;\n}\n\nclass Quote extends React.Component{\n  constructor(props){\n    super(props);\n    this.state = {\n      pos: 0,\n      min: 0,\n      sec: 0,\n      milisec: 0\n    };\n    this.speed = 0;\n  }\n\n  componentDidMount(){\n    this.typingFunction = this.typing.bind(this);\n    window.addEventListener(\"keypress\", this.typingFunction, true);\n    document.getElementsByClassName(\"fake-text\")[0].addEventListener(\"beforeinput\", this.typingFunction);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"keypress\", this.typingFunction, true);\n    document.getElementsByClassName(\"fake-text\")[0].removeEventListener(\"beforeinput\", this.typingFunction);\n  }\n\n  typing(event) {\n    event.preventDefault();\n    let key = getCharFromEvent(event);\n    this.setState((state, props) => {\n      if(key === quote[state.pos]){\n        if(state.pos === 0){\n          this.startTime = new Date();\n          if(this.timerID == null)\n            this.timerID = setInterval(\n              this.tick.bind(this), \n              10\n            );\n        }\n        else if(state.pos === quote.length - 1){\n          // console.log(this.timerID);\n          clearInterval(this.timerID);\n          this.timerID = null;\n          this.speed = (quote.length/ ((state.min * 60) + state.sec + (state.milisec / 100))).toFixed(2);\n          document.getElementById(\"speed\").style.display = \"initial\";\n        }\n        return {pos: state.pos + 1};\n      }\n      return {pos: state.pos};\n    });\n  }\n\n  tick() {\n    let currDate = new Date();\n    let diffInMilisec = currDate - this.startTime;\n    this.setState({min: Math.floor(diffInMilisec / (60 * 1000))});\n    diffInMilisec %= (60 * 1000);\n    this.setState({sec: Math.floor(diffInMilisec / 1000)});\n    this.setState({milisec: diffInMilisec % 1000});\n  }\n\n  render() {\n    return (\n      <div className=\"main\">\n        <div className = \"quote\">\n          <span className = \"Completed\">{quote.substring(0, this.state.pos)}</span>\n          <span>{quote.substring(this.state.pos, quote.length)}</span>\n        </div>\n        <div className = \"timer\">\n          <div className = \"container\">\n            <div className = \"time\">{(\"0\" + this.state.min).slice(-2)}</div>\n            <div className = \"name\">Minutes</div>\n          </div>\n          <div className = \"container\">\n            <div className = \"time\">{(\"0\" + this.state.sec).slice(-2)}</div>\n            <div className = \"name\">Seconds</div>\n          </div>\n          <div className = \"container\">\n            <div className = \"time\">{(\"0\" + this.state.milisec + \"0\").slice(-3)}</div>\n            <div className = \"name\">Miliseconds</div>\n          </div>\n        </div>\n        <div id = \"speed\">\n          {this.speed} characters/sec\n        </div>\n      </div>\n    );\n  }\n}\n\nclass Button extends React.Component{\n  render() {\n    return (\n      <div className=\"fake-button\">\n        <div className = \"start-now\">Start Now!</div>\n        <input type=\"password\" className=\"fake-text\"></input>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport './exchange.css';\nlet fromInEUR = 0;\nlet toInEUR = 0;\nlet rates = fetchCurrencies();\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Currency curr={rates}/>\n    </div>\n  );\n}\n\nfunction fetchCurrencies() {\n  let currencies = {};\n  fetch('https://api.ratesapi.io/api/latest').then(r => {\n            if (r.ok) {\n                return r.json();\n            }\n            throw new Error(r.statusText);\n        }).then(data => {\n            Object.assign(currencies, data);\n        }).catch(e => console.error(e));\n        return currencies;\n}\n\nclass Currency extends React.Component{\n  constructor(props) {\n    super(props);\n    this.state = {\n      converted: \"\"\n    }\n  }\n\n  handleClick(){\n    let amount = parseInt(document.getElementById(\"amount\").value);\n    if(isNaN(amount)){\n      amount = 0;\n    }\n    document.getElementsByClassName(\"converted\")[0].style.display=\"initial\";\n    this.setState({converted: amount + \" \" + document.getElementById(\"fromList\").value + \" = \" + ((amount * toInEUR)/fromInEUR).toFixed(2) + \" \" + document.getElementById(\"toList\").value});\n  }\n\n  handleChange() {\n    fromInEUR = this.props.curr.rates[document.getElementById(\"fromList\").value];\n    toInEUR = this.props.curr.rates[document.getElementById(\"toList\").value];\n  }\n\n  render() {\n    return (\n      <div className=\"Currency\">\n        <input type=\"text\" id=\"amount\" placeholder=\"Amount\"></input>\n        <div className=\"dropDown\">\n          <div className=\"container\">\n            <span>From</span>\n            <div className=\"custom-select\">\n              <select id=\"fromList\" onChange={this.handleChange.bind(this)}>\n                <option value=\"None\">Select</option>\n                <option value=\"AUD\">AUD</option>\n                <option value=\"BGN\">BGN</option>\n                <option value=\"BRL\">BRL</option>\n                <option value=\"CAD\">CAD</option>\n                <option value=\"CHF\">CHF</option>\n                <option value=\"CNY\">CNY</option>\n                <option value=\"CZK\">CZK</option>\n                <option value=\"DKK\">DKK</option>\n                <option value=\"GBP\">GBP</option>\n                <option value=\"HKD\">HKD</option>\n                <option value=\"HRK\">HRK</option>\n                <option value=\"HUF\">HUF</option>\n                <option value=\"IDR\">IDR</option>\n                <option value=\"ILS\">ILS</option>\n                <option value=\"INR\">INR</option>\n                <option value=\"ISK\">ISK</option>\n                <option value=\"JPY\">JPY</option>\n                <option value=\"KRW\">KRW</option>\n                <option value=\"MXN\">MXN</option>\n                <option value=\"MYR\">MYR</option>\n                <option value=\"NOK\">NOK</option>\n                <option value=\"NZD\">NZD</option>\n                <option value=\"PHP\">PHP</option>\n                <option value=\"PLN\">PLN</option>\n                <option value=\"RON\">RON</option>\n                <option value=\"RUB\">RUB</option>\n                <option value=\"SEK\">SEK</option>\n                <option value=\"SGD\">SGD</option>\n                <option value=\"THB\">THB</option>\n                <option value=\"TRY\">TRY</option>\n                <option value=\"USD\">USD</option>\n                <option value=\"ZAR\">ZAR</option>\n              </select>\n            </div>\n          </div>\n          <div className=\"container\">\n            <span>To</span>\n            <div className=\"custom-select\">\n              <select id=\"toList\" onChange={this.handleChange.bind(this)}>\n                <option value=\"None\">Select</option>\n                <option value=\"AUD\">AUD</option>\n                <option value=\"BGN\">BGN</option>\n                <option value=\"BRL\">BRL</option>\n                <option value=\"CAD\">CAD</option>\n                <option value=\"CHF\">CHF</option>\n                <option value=\"CNY\">CNY</option>\n                <option value=\"CZK\">CZK</option>\n                <option value=\"DKK\">DKK</option>\n                <option value=\"GBP\">GBP</option>\n                <option value=\"HKD\">HKD</option>\n                <option value=\"HRK\">HRK</option>\n                <option value=\"HUF\">HUF</option>\n                <option value=\"IDR\">IDR</option>\n                <option value=\"ILS\">ILS</option>\n                <option value=\"INR\">INR</option>\n                <option value=\"ISK\">ISK</option>\n                <option value=\"JPY\">JPY</option>\n                <option value=\"KRW\">KRW</option>\n                <option value=\"MXN\">MXN</option>\n                <option value=\"MYR\">MYR</option>\n                <option value=\"NOK\">NOK</option>\n                <option value=\"NZD\">NZD</option>\n                <option value=\"PHP\">PHP</option>\n                <option value=\"PLN\">PLN</option>\n                <option value=\"RON\">RON</option>\n                <option value=\"RUB\">RUB</option>\n                <option value=\"SEK\">SEK</option>\n                <option value=\"SGD\">SGD</option>\n                <option value=\"THB\">THB</option>\n                <option value=\"TRY\">TRY</option>\n                <option value=\"USD\">USD</option>\n                <option value=\"ZAR\">ZAR</option>\n              </select>\n            </div>\n          </div>\n        </div>\n        <button onClick={this.handleClick.bind(this)} className=\"compute\">Compute</button>\n        <div className=\"converted\">\n          {this.state.converted}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport './App.css';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\nimport Typing from './typing.js';\nimport Exchange from './exchange.js';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <div className=\"list\">\n          <ul>\n            <li>\n              <Link to=\"/typing\">Check your Typing Speed</Link>\n            </li>\n            <li>\n              <Link to=\"/exchange\">Currency Converter</Link>\n            </li>\n          </ul>\n\n          <Switch>\n            <Route path=\"/typing\">\n              <Typing />\n            </Route>\n            <Route path=\"/exchange\">\n              <Exchange />\n            </Route>\n          </Switch>\n        </div>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}